{"version":3,"sources":["../webpack/bootstrap","../external \"vscode\"",".././src/flutter-auto-import.ts",".././src/import-db.ts",".././src/extension.ts",".././src/helpers/error-helper.ts",".././src/flutter-import-scanner.ts","../external \"fs\""],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","require","vscode","import_db_1","flutter_import_scanner_1","AutoImport","[object Object]","context","this","undefined","workspace","rootPath","console","log","disposable","commands","registerCommand","items","allImports","ImportDb","all","index","length","item","push","label","description","detail","file","path","window","showQuickPick","ignoreFocusOut","matchOnDescription","matchOnDetail","placeHolder","then","msg","filePath","indexOf","filePaths","split","prefixs","relativePath","edit","WorkspaceEdit","activeTextEditor","document","uri","Position","insert","applyEdit","importScanner","request","scanner","ImportScanner","getConfiguration","showOutput","scan","delete","statusBar","createStatusBarItem","StatusBarAlignment","Left","text","show","subscriptions","workspaceFolders","forEach","glob","relativePattern","RelativePattern","watcher","createFileSystemWatcher","onDidChange","executeCommand","onDidCreate","onDidDelete","settings","workspaceState","firstRun","showInformationMessage","update","count","imports","doc","getWorkspaceFolder","matcher","filter","findIndex","fsPath","splice","error","data","trim","obj","Array","error_helper_1","flutter_auto_import_1","activate","extension","start","attachCommands","attachFileWatcher","scanIfRequired","ErrorHelper","handle","deactivate","FS","config","filesToScan","showNotifications","scanStarted","Date","scanLocation","findFiles","files","processWorkspaceFiles","loadFile","setStatusBar","pruned","f","last","readFile","err","processFile","scanEnded","str","Math","abs","classMatches","match","enumMatches","workingFile","replace","saveImport"],"mappings":"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","file":"extension.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 3);\n","module.exports = require(\"vscode\");","import * as vscode from 'vscode';\nimport { ImportDb } from './import-db';\nimport { ImportAction } from './flutter-import-action';\nimport { ImportScanner } from './flutter-import-scanner';\nimport { print } from 'util';\n\nexport class AutoImport {\n\n    public static statusBar;\n\n    constructor(private context: vscode.ExtensionContext) { }\n\n    public start(): boolean {\n\n        let folder = vscode.workspace.rootPath;\n\n        if (folder === undefined) {\n            return false;\n        }\n\n        return true;\n    }\n\n    public attachCommands(): void {\n\n        // 不用实时检查，就不用开启了\n        // let codeActionFixer = vscode.languages.registerCodeActionsProvider('dart', new ImportAction())\n\n        console.log(22222);\n        let disposable = vscode.commands.registerCommand('extension.flutterautoimport', function () {\n            let items: vscode.QuickPickItem[] = [];\n            let allImports = ImportDb.all();\n            for (let index = 0; index < allImports.length; index++) {\n              let item = allImports[index];\n              items.push({ \n                label: item.name, \n                description: item.name, \n                detail: item.file.path});\n            }\n            vscode.window.showQuickPick(\n            items,\n            {\n                ignoreFocusOut:true,\n                matchOnDescription:true,\n                matchOnDetail:true,\n                placeHolder:'选择要引入的库？'\n            }).then(function(msg){\n                var filePath = msg.detail;\n                var libIndex = filePath.indexOf('lib')\n                if (libIndex >= 0) {\n                    var filePaths = filePath.split('lib')\n                    var prefixs = filePaths[0].split('/')\n                    var moduleName = prefixs[prefixs.length-2]\n                    var relativePath = \"import 'package:\"+moduleName+filePaths[1]+\"';\\n\"\n                    let edit: vscode.WorkspaceEdit = new vscode.WorkspaceEdit();\n                    \n                    console.log(vscode.window.activeTextEditor.document.uri , new vscode.Position(0, 0),relativePath);\n                    edit.insert(vscode.window.activeTextEditor.document.uri , new vscode.Position(0, 0),relativePath);\n                    vscode.workspace.applyEdit(edit)\n                }\n                console.log();\n            })\n        });\n\n        let importScanner = vscode.commands.registerCommand('extension.importScan', (request: any) => {\n\n            let scanner = new ImportScanner(vscode.workspace.getConfiguration('autoimport'))\n\n            if (request.showOutput) {\n                scanner.scan(request);\n            } else if (request.edit) {\n                scanner.edit(request);\n            }\n            else if (request.delete) {\n                scanner.delete(request);\n            }\n        });\n\n        AutoImport.statusBar = vscode.window.createStatusBarItem(vscode.StatusBarAlignment.Left, 1);\n\n        AutoImport.statusBar.text = '{--} : Scanning.. ';\n\n        AutoImport.statusBar.show();\n\n        this.context.subscriptions.push(importScanner, disposable, AutoImport.statusBar);\n        // this.context.subscriptions.push(importScanner, importFixer, nodeScanner, codeActionFixer, AutoImport.statusBar, completetion);\n    }\n\n    public attachFileWatcher(): void {\n        \n        var multiWorkspace = vscode.workspace.workspaceFolders.length > 0;\n\n        if (multiWorkspace === true) {\n            \n            vscode.workspace.workspaceFolders.forEach(workspace => {\n\n                let glob = vscode.workspace.getConfiguration('autoimport').get<string>('filesToScan');\n\n                const relativePattern = new vscode.RelativePattern(workspace, glob);\n\n                let watcher = vscode.workspace.createFileSystemWatcher(relativePattern);\n\n                watcher.onDidChange((file: vscode.Uri) => {\n                    console.log('multiWorkspace change');\n                    vscode.commands\n                        .executeCommand('extension.importScan', { workspace, file, edit: true });\n                })\n\n                watcher.onDidCreate((file: vscode.Uri) => {\n                    console.log('multiWorkspace create');\n                    vscode.commands\n                        .executeCommand('extension.importScan', { workspace, file, edit: true });\n                })\n\n                watcher.onDidDelete((file: vscode.Uri) => {\n                    console.log('multiWorkspace delete');\n                    vscode.commands\n                        .executeCommand('extension.importScan', { workspace, file, delete: true });\n                })\n\n\n            });\n\n        } else {\n\n            let glob = vscode.workspace.getConfiguration('autoimport').get<string>('filesToScan');\n\n            let watcher = vscode.workspace.createFileSystemWatcher(glob);\n\n            let workspace = undefined;\n\n            watcher.onDidChange((file: vscode.Uri) => {\n                console.log('singleWorkspace change');\n                vscode.commands\n                    .executeCommand('extension.importScan', { workspace, file, edit: true });\n            })\n\n            watcher.onDidCreate((file: vscode.Uri) => {\n                console.log('singleWorkspace create');\n                vscode.commands\n                    .executeCommand('extension.importScan', { workspace, file, edit: true });\n            })\n\n            watcher.onDidDelete((file: vscode.Uri) => {\n                console.log('singleWorkspace delete');\n                vscode.commands\n                    .executeCommand('extension.importScan', { workspace, file, delete: true });\n            })\n        }\n\n\n    }\n\n    public scanIfRequired(): void {\n\n        let settings = this.context.workspaceState.get<any>('auto-import-settings')\n\n        let firstRun = (settings === undefined || settings.firstRun);\n\n        if (vscode.workspace.getConfiguration('autoimport').get<boolean>('showNotifications')) {\n            vscode.window\n                .showInformationMessage('[AutoImport] Building cache');\n        }\n\n        var multiWorkspace = vscode.workspace.workspaceFolders.length > 0;\n\n        if (multiWorkspace === true) {\n\n            vscode.workspace.workspaceFolders.forEach(workspace => {\n\n                vscode.commands\n                    .executeCommand('extension.importScan', { workspace, showOutput: true });\n\n            });\n        } else {\n\n            vscode.commands\n                .executeCommand('extension.importScan', { showOutput: true });\n        }\n\n\n        settings.firstRun = true;\n\n        this.context.workspaceState.update('auto-import-settings', settings);\n    }\n\n    public static setStatusBar() {\n        AutoImport.statusBar.text = `{..} : ${ImportDb.count}`;\n    }\n\n}","\nimport * as Path from 'path';\nimport * as vscode from 'vscode';\n\nexport interface ImportObject {\n    name: string,\n    file: vscode.Uri,\n    workspace: vscode.WorkspaceFolder\n}\n\n\nexport class ImportDb {\n\n    private static imports: Array<ImportObject> = new Array<ImportObject>();\n\n    public static get count() {\n\n        return ImportDb.imports.length;\n    }\n\n    public static all(): Array<ImportObject> {\n        return ImportDb.imports;\n    }\n\n    public static getImport(name: string, doc: vscode.Uri): Array<ImportObject> {\n\n        let workspace = vscode.workspace.getWorkspaceFolder(doc);\n\n        let matcher = (i: ImportObject) => i.name === name;\n\n        if (workspace !== undefined) {\n            matcher = (i: ImportObject) => i.name === name && i.workspace.name === workspace.name;\n        }\n\n        return ImportDb.imports.filter(matcher);\n    }\n\n    public static delete(request: any): void {\n\n        try {\n\n            let index = ImportDb.imports.findIndex(m => m.file.fsPath === request.file.fsPath);\n\n            if (index !== -1) {\n                ImportDb.imports.splice(index, 1);\n            }\n\n        } catch (error) {\n\n        }\n\n    }\n\n    public static saveImport(name: string, data: any, file: any, workspace: vscode.WorkspaceFolder): void {\n\n        name = name.trim();\n\n        if (name === '' || name.length === 1) {\n            return;\n        }\n\n\n        let obj: ImportObject = {\n            name,\n            file,\n            workspace\n        }\n\n        let exists = ImportDb.imports.findIndex(m => m.name === obj.name && m.file.fsPath === file.fsPath);\n\n        if (exists === -1) {\n            ImportDb.imports.push(obj);\n        }\n\n    }\n}","import * as vscode from 'vscode';\n\nimport { ErrorHelper } from './helpers/error-helper';\nimport { AutoImport } from './flutter-auto-import';\n\nexport function activate(context: vscode.ExtensionContext) {\n\n    try {\n\n        if (context.workspaceState.get('auto-import-settings') === undefined) {\n            context.workspaceState.update('auto-import-settings', {});\n        }\n\n        let extension = new AutoImport(context);\n\n        let start = extension.start();\n\n        if (!start) {\n            return;\n        }\n\n        extension.attachCommands();\n\n        extension.attachFileWatcher();\n\n        extension.scanIfRequired();\n        \n\n    } catch (error) {\n        ErrorHelper.handle(error);\n    }\n\n}\n\nexport function deactivate() {\n\n}","export class ErrorHelper {\n    public static handle(error: Error) {\n        console.log(error);\n    }\n}","import * as FS from 'fs';\nimport * as vscode from 'vscode';\nimport * as _ from 'lodash';\n\nimport { ImportDb } from './import-db';\nimport { AutoImport } from './flutter-auto-import';\n\nexport class ImportScanner {\n\n    private scanStarted: Date;\n\n    private scanEnded: Date;\n\n    private showOutput: boolean;\n\n    private filesToScan: string;\n\n    private showNotifications: boolean;\n\n    constructor(private config: vscode.WorkspaceConfiguration) {\n        this.filesToScan = this.config.get<string>('filesToScan');\n        this.showNotifications = this.config.get<boolean>('showNotifications');\n    }\n\n    public scan(request: any): void {\n\n        this.showOutput = request.showOutput ? request.showOutput : false;\n\n        if (this.showOutput) {\n            this.scanStarted = new Date();\n        }\n\n        let scanLocation: any = this.filesToScan;\n\n        if (request.workspace !== undefined) {\n            scanLocation = new vscode.RelativePattern(request.workspace.uri.path+'/lib', scanLocation);\n        }\n        vscode.workspace\n            .findFiles(scanLocation, '**/node_modules/**', 99999)//node_modules是屏蔽的目录\n            .then((files) => {\n                // 这里会搜索当前目录所有文件\n                this.processWorkspaceFiles(files)\n            });\n\n        // vscode.commands\n        //     .executeCommand('extension.scanNodeModules');\n\n    }\n\n    public edit(request: any): void {\n        ImportDb.delete(request);\n        this.loadFile(request.file, request.workspace, true);\n        // new NodeUpload(vscode.workspace.getConfiguration('autoimport')).scanNodeModules();\n\n    }\n\n    public delete(request: any): void {\n        ImportDb.delete(request);\n        AutoImport.setStatusBar();\n    }\n\n\n    private processWorkspaceFiles(files: vscode.Uri[]): void {\n\n        // 过滤\n        // let pruned = files.filter((f) => {\n        //     return f.fsPath.indexOf('typings') === -1 &&\n        //         f.fsPath.indexOf('node_modules') === -1 &&\n        //         f.fsPath.indexOf('jspm_packages') === -1;\n        // });\n        let pruned = files\n        pruned.forEach((f, i) => {\n\n            let workspace: vscode.WorkspaceFolder\n                = vscode.workspace.getWorkspaceFolder(f)\n\n            this.loadFile(f, workspace, i === (pruned.length - 1));\n\n\n        });\n    }\n\n    private loadFile(file: vscode.Uri, workspace: vscode.WorkspaceFolder, last: boolean): void {\n        if (~file.fsPath.indexOf('main.dart')) {\n            return;\n        }\n        FS.readFile(file.fsPath, 'utf8', (err, data) => {\n\n            if (err) {\n                return console.log(err);\n            }\n\n            this.processFile(data, file, workspace);\n            if (last) {\n                AutoImport.setStatusBar();\n            }\n\n            if (last && this.showOutput && this.showNotifications) {\n                this.scanEnded = new Date();\n\n                let str = `[AutoImport] cache creation complete - (${Math.abs(<any>this.scanStarted - <any>this.scanEnded)}ms)`;\n\n                vscode.window\n                    .showInformationMessage(str);\n            }\n\n        });\n    }\n\n    private processFile(data: any, file: vscode.Uri, workspace: vscode.WorkspaceFolder): void {\n\n        var classMatches = data.match(/(class) ([a-zA-Z])+/g),\n            enumMatches = data.match(/(enum) ([a-zA-Z])+/g)\n\n        if (classMatches) {\n            classMatches.forEach(m => {\n                let workingFile: string =\n                    m.replace('class ', '');\n\n                ImportDb.saveImport(workingFile, data, file, workspace);\n            });\n        }\n\n        if (enumMatches) {\n            enumMatches.forEach(m => {\n                let workingFile: string =\n                    m.replace('enum ', '');\n\n                ImportDb.saveImport(workingFile, data, file, workspace);\n            });\n        }\n    }\n}","module.exports = require(\"fs\");"],"sourceRoot":""}